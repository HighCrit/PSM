//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/dortm/Documents/Projects/PSM/PSM.Parsers.Labels.Grammar/TransitionLabels.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class TransitionLabelsParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		BOOLEAN=1, INTEGER=2, DECIMAL=3, DIGITS=4, OR=5, AND=6, NOT=7, VARIABLE_OP=8, 
		PATH=9, IDENTIFIER=10, LPAREN=11, RPAREN=12, CMDCHK=13, WS=14;
	public const int
		RULE_label = 0, RULE_orExpr = 1, RULE_andExpr = 2, RULE_negExpr = 3, RULE_val = 4, 
		RULE_variable = 5, RULE_command = 6, RULE_variable_val = 7;
	public static readonly string[] ruleNames = {
		"label", "orExpr", "andExpr", "negExpr", "val", "variable", "command", 
		"variable_val"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, "'OR'", "'AND'", "'NOT'", null, null, null, 
		"'('", "')'", "'CmdChk('"
	};
	private static readonly string[] _SymbolicNames = {
		null, "BOOLEAN", "INTEGER", "DECIMAL", "DIGITS", "OR", "AND", "NOT", "VARIABLE_OP", 
		"PATH", "IDENTIFIER", "LPAREN", "RPAREN", "CMDCHK", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "TransitionLabels.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static TransitionLabelsParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public TransitionLabelsParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public TransitionLabelsParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class LabelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OrExprContext orExpr() {
			return GetRuleContext<OrExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(TransitionLabelsParser.Eof, 0); }
		public LabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITransitionLabelsListener typedListener = listener as ITransitionLabelsListener;
			if (typedListener != null) typedListener.EnterLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITransitionLabelsListener typedListener = listener as ITransitionLabelsListener;
			if (typedListener != null) typedListener.ExitLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITransitionLabelsVisitor<TResult> typedVisitor = visitor as ITransitionLabelsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelContext label() {
		LabelContext _localctx = new LabelContext(Context, State);
		EnterRule(_localctx, 0, RULE_label);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 16;
			orExpr();
			State = 17;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AndExprContext[] andExpr() {
			return GetRuleContexts<AndExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AndExprContext andExpr(int i) {
			return GetRuleContext<AndExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR() { return GetTokens(TransitionLabelsParser.OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR(int i) {
			return GetToken(TransitionLabelsParser.OR, i);
		}
		public OrExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITransitionLabelsListener typedListener = listener as ITransitionLabelsListener;
			if (typedListener != null) typedListener.EnterOrExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITransitionLabelsListener typedListener = listener as ITransitionLabelsListener;
			if (typedListener != null) typedListener.ExitOrExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITransitionLabelsVisitor<TResult> typedVisitor = visitor as ITransitionLabelsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrExprContext orExpr() {
		OrExprContext _localctx = new OrExprContext(Context, State);
		EnterRule(_localctx, 2, RULE_orExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 19;
			andExpr();
			State = 24;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OR) {
				{
				{
				State = 20;
				Match(OR);
				State = 21;
				andExpr();
				}
				}
				State = 26;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AndExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NegExprContext[] negExpr() {
			return GetRuleContexts<NegExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NegExprContext negExpr(int i) {
			return GetRuleContext<NegExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND() { return GetTokens(TransitionLabelsParser.AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND(int i) {
			return GetToken(TransitionLabelsParser.AND, i);
		}
		public AndExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_andExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITransitionLabelsListener typedListener = listener as ITransitionLabelsListener;
			if (typedListener != null) typedListener.EnterAndExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITransitionLabelsListener typedListener = listener as ITransitionLabelsListener;
			if (typedListener != null) typedListener.ExitAndExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITransitionLabelsVisitor<TResult> typedVisitor = visitor as ITransitionLabelsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AndExprContext andExpr() {
		AndExprContext _localctx = new AndExprContext(Context, State);
		EnterRule(_localctx, 4, RULE_andExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 27;
			negExpr();
			State = 32;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AND) {
				{
				{
				State = 28;
				Match(AND);
				State = 29;
				negExpr();
				}
				}
				State = 34;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NegExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(TransitionLabelsParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NegExprContext negExpr() {
			return GetRuleContext<NegExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValContext val() {
			return GetRuleContext<ValContext>(0);
		}
		public NegExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_negExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITransitionLabelsListener typedListener = listener as ITransitionLabelsListener;
			if (typedListener != null) typedListener.EnterNegExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITransitionLabelsListener typedListener = listener as ITransitionLabelsListener;
			if (typedListener != null) typedListener.ExitNegExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITransitionLabelsVisitor<TResult> typedVisitor = visitor as ITransitionLabelsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NegExprContext negExpr() {
		NegExprContext _localctx = new NegExprContext(Context, State);
		EnterRule(_localctx, 6, RULE_negExpr);
		try {
			State = 38;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NOT:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 35;
				Match(NOT);
				State = 36;
				negExpr();
				}
				}
				break;
			case PATH:
			case LPAREN:
			case CMDCHK:
				EnterOuterAlt(_localctx, 2);
				{
				State = 37;
				val();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext command() {
			return GetRuleContext<CommandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(TransitionLabelsParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OrExprContext orExpr() {
			return GetRuleContext<OrExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(TransitionLabelsParser.RPAREN, 0); }
		public ValContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_val; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITransitionLabelsListener typedListener = listener as ITransitionLabelsListener;
			if (typedListener != null) typedListener.EnterVal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITransitionLabelsListener typedListener = listener as ITransitionLabelsListener;
			if (typedListener != null) typedListener.ExitVal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITransitionLabelsVisitor<TResult> typedVisitor = visitor as ITransitionLabelsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValContext val() {
		ValContext _localctx = new ValContext(Context, State);
		EnterRule(_localctx, 8, RULE_val);
		try {
			State = 46;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CMDCHK:
				EnterOuterAlt(_localctx, 1);
				{
				State = 40;
				command();
				}
				break;
			case PATH:
				EnterOuterAlt(_localctx, 2);
				{
				State = 41;
				variable();
				}
				break;
			case LPAREN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 42;
				Match(LPAREN);
				State = 43;
				orExpr();
				State = 44;
				Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PATH() { return GetToken(TransitionLabelsParser.PATH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_OP() { return GetToken(TransitionLabelsParser.VARIABLE_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Variable_valContext variable_val() {
			return GetRuleContext<Variable_valContext>(0);
		}
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITransitionLabelsListener typedListener = listener as ITransitionLabelsListener;
			if (typedListener != null) typedListener.EnterVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITransitionLabelsListener typedListener = listener as ITransitionLabelsListener;
			if (typedListener != null) typedListener.ExitVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITransitionLabelsVisitor<TResult> typedVisitor = visitor as ITransitionLabelsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 10, RULE_variable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 48;
			Match(PATH);
			State = 51;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==VARIABLE_OP) {
				{
				State = 49;
				Match(VARIABLE_OP);
				State = 50;
				variable_val();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMDCHK() { return GetToken(TransitionLabelsParser.CMDCHK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PATH() { return GetToken(TransitionLabelsParser.PATH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(TransitionLabelsParser.RPAREN, 0); }
		public CommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_command; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITransitionLabelsListener typedListener = listener as ITransitionLabelsListener;
			if (typedListener != null) typedListener.EnterCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITransitionLabelsListener typedListener = listener as ITransitionLabelsListener;
			if (typedListener != null) typedListener.ExitCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITransitionLabelsVisitor<TResult> typedVisitor = visitor as ITransitionLabelsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommandContext command() {
		CommandContext _localctx = new CommandContext(Context, State);
		EnterRule(_localctx, 12, RULE_command);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 53;
			Match(CMDCHK);
			State = 54;
			Match(PATH);
			State = 55;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_valContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(TransitionLabelsParser.BOOLEAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(TransitionLabelsParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(TransitionLabelsParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PATH() { return GetToken(TransitionLabelsParser.PATH, 0); }
		public Variable_valContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_val; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITransitionLabelsListener typedListener = listener as ITransitionLabelsListener;
			if (typedListener != null) typedListener.EnterVariable_val(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITransitionLabelsListener typedListener = listener as ITransitionLabelsListener;
			if (typedListener != null) typedListener.ExitVariable_val(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITransitionLabelsVisitor<TResult> typedVisitor = visitor as ITransitionLabelsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_val(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_valContext variable_val() {
		Variable_valContext _localctx = new Variable_valContext(Context, State);
		EnterRule(_localctx, 14, RULE_variable_val);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 57;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 526L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,14,60,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,1,0,1,0,1,0,1,1,1,1,1,1,5,1,23,8,1,10,1,12,1,26,9,1,1,2,1,2,1,2,5,
		2,31,8,2,10,2,12,2,34,9,2,1,3,1,3,1,3,3,3,39,8,3,1,4,1,4,1,4,1,4,1,4,1,
		4,3,4,47,8,4,1,5,1,5,1,5,3,5,52,8,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,0,0,8,
		0,2,4,6,8,10,12,14,0,1,2,0,1,3,9,9,57,0,16,1,0,0,0,2,19,1,0,0,0,4,27,1,
		0,0,0,6,38,1,0,0,0,8,46,1,0,0,0,10,48,1,0,0,0,12,53,1,0,0,0,14,57,1,0,
		0,0,16,17,3,2,1,0,17,18,5,0,0,1,18,1,1,0,0,0,19,24,3,4,2,0,20,21,5,5,0,
		0,21,23,3,4,2,0,22,20,1,0,0,0,23,26,1,0,0,0,24,22,1,0,0,0,24,25,1,0,0,
		0,25,3,1,0,0,0,26,24,1,0,0,0,27,32,3,6,3,0,28,29,5,6,0,0,29,31,3,6,3,0,
		30,28,1,0,0,0,31,34,1,0,0,0,32,30,1,0,0,0,32,33,1,0,0,0,33,5,1,0,0,0,34,
		32,1,0,0,0,35,36,5,7,0,0,36,39,3,6,3,0,37,39,3,8,4,0,38,35,1,0,0,0,38,
		37,1,0,0,0,39,7,1,0,0,0,40,47,3,12,6,0,41,47,3,10,5,0,42,43,5,11,0,0,43,
		44,3,2,1,0,44,45,5,12,0,0,45,47,1,0,0,0,46,40,1,0,0,0,46,41,1,0,0,0,46,
		42,1,0,0,0,47,9,1,0,0,0,48,51,5,9,0,0,49,50,5,8,0,0,50,52,3,14,7,0,51,
		49,1,0,0,0,51,52,1,0,0,0,52,11,1,0,0,0,53,54,5,13,0,0,54,55,5,9,0,0,55,
		56,5,12,0,0,56,13,1,0,0,0,57,58,7,0,0,0,58,15,1,0,0,0,5,24,32,38,46,51
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
