//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/dortm/Documents/Projects/PSM/PSM.Parsers.Labels.Grammar/TransitionLabels.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class TransitionLabelsLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		BOOLEAN=1, INTEGER=2, DECIMAL=3, DIGITS=4, OR=5, AND=6, NOT=7, VARIABLE_OP=8, 
		PATH=9, IDENTIFIER=10, LPAREN=11, RPAREN=12, CMDCHK=13, WS=14;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"BOOLEAN", "INTEGER", "DECIMAL", "DIGITS", "OR", "AND", "NOT", "VARIABLE_OP", 
		"PATH", "IDENTIFIER", "LPAREN", "RPAREN", "CMDCHK", "WS"
	};


	public TransitionLabelsLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public TransitionLabelsLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, "'OR'", "'AND'", "'NOT'", null, null, null, 
		"'('", "')'", "'CmdChk('"
	};
	private static readonly string[] _SymbolicNames = {
		null, "BOOLEAN", "INTEGER", "DECIMAL", "DIGITS", "OR", "AND", "NOT", "VARIABLE_OP", 
		"PATH", "IDENTIFIER", "LPAREN", "RPAREN", "CMDCHK", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "TransitionLabels.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static TransitionLabelsLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,14,109,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,1,0,
		1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,3,0,39,8,0,1,1,3,1,42,8,1,1,1,1,1,1,2,
		3,2,47,8,2,1,2,1,2,1,2,1,2,1,3,4,3,54,8,3,11,3,12,3,55,1,4,1,4,1,4,1,5,
		1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,76,8,7,1,8,
		1,8,1,8,5,8,81,8,8,10,8,12,8,84,9,8,1,9,4,9,87,8,9,11,9,12,9,88,1,10,1,
		10,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,4,13,104,8,13,
		11,13,12,13,105,1,13,1,13,0,0,14,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,
		9,19,10,21,11,23,12,25,13,27,14,1,0,4,1,0,48,57,2,0,60,60,62,62,4,0,48,
		57,65,90,95,95,97,122,3,0,9,10,13,13,32,32,118,0,1,1,0,0,0,0,3,1,0,0,0,
		0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,
		0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,
		27,1,0,0,0,1,38,1,0,0,0,3,41,1,0,0,0,5,46,1,0,0,0,7,53,1,0,0,0,9,57,1,
		0,0,0,11,60,1,0,0,0,13,64,1,0,0,0,15,75,1,0,0,0,17,77,1,0,0,0,19,86,1,
		0,0,0,21,90,1,0,0,0,23,92,1,0,0,0,25,94,1,0,0,0,27,103,1,0,0,0,29,30,5,
		116,0,0,30,31,5,114,0,0,31,32,5,117,0,0,32,39,5,101,0,0,33,34,5,102,0,
		0,34,35,5,97,0,0,35,36,5,108,0,0,36,37,5,115,0,0,37,39,5,101,0,0,38,29,
		1,0,0,0,38,33,1,0,0,0,39,2,1,0,0,0,40,42,5,45,0,0,41,40,1,0,0,0,41,42,
		1,0,0,0,42,43,1,0,0,0,43,44,3,7,3,0,44,4,1,0,0,0,45,47,5,45,0,0,46,45,
		1,0,0,0,46,47,1,0,0,0,47,48,1,0,0,0,48,49,3,7,3,0,49,50,5,46,0,0,50,51,
		3,7,3,0,51,6,1,0,0,0,52,54,7,0,0,0,53,52,1,0,0,0,54,55,1,0,0,0,55,53,1,
		0,0,0,55,56,1,0,0,0,56,8,1,0,0,0,57,58,5,79,0,0,58,59,5,82,0,0,59,10,1,
		0,0,0,60,61,5,65,0,0,61,62,5,78,0,0,62,63,5,68,0,0,63,12,1,0,0,0,64,65,
		5,78,0,0,65,66,5,79,0,0,66,67,5,84,0,0,67,14,1,0,0,0,68,69,5,61,0,0,69,
		76,5,61,0,0,70,76,7,1,0,0,71,72,5,60,0,0,72,76,5,61,0,0,73,74,5,62,0,0,
		74,76,5,61,0,0,75,68,1,0,0,0,75,70,1,0,0,0,75,71,1,0,0,0,75,73,1,0,0,0,
		76,16,1,0,0,0,77,82,3,19,9,0,78,79,5,46,0,0,79,81,3,19,9,0,80,78,1,0,0,
		0,81,84,1,0,0,0,82,80,1,0,0,0,82,83,1,0,0,0,83,18,1,0,0,0,84,82,1,0,0,
		0,85,87,7,2,0,0,86,85,1,0,0,0,87,88,1,0,0,0,88,86,1,0,0,0,88,89,1,0,0,
		0,89,20,1,0,0,0,90,91,5,40,0,0,91,22,1,0,0,0,92,93,5,41,0,0,93,24,1,0,
		0,0,94,95,5,67,0,0,95,96,5,109,0,0,96,97,5,100,0,0,97,98,5,67,0,0,98,99,
		5,104,0,0,99,100,5,107,0,0,100,101,5,40,0,0,101,26,1,0,0,0,102,104,7,3,
		0,0,103,102,1,0,0,0,104,105,1,0,0,0,105,103,1,0,0,0,105,106,1,0,0,0,106,
		107,1,0,0,0,107,108,6,13,0,0,108,28,1,0,0,0,9,0,38,41,46,55,75,82,88,105,
		1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
